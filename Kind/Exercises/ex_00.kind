// Basic Exercises involving Bools

type Bool {
  true
  false
}

// Is true
// Returns true if input is true
is_true(a: Bool): Bool
  a

// Is false
// Returns true if input is false
is_false(a: Bool): Bool
  case a {
    false: Bool.true
    true: Bool.false
  }

// Negation
// Returns the opposite of a Bool
neg(b: Bool): Bool 
  is_false(b)

// And
// Returns true if both inputs are true
and(a: Bool, b: Bool): Bool
  case a{
    true: b
    false: Bool.false
  }

// Or
// Returs true if any input is true
or(a: Bool, b: Bool): Bool
  case a{
    true: Bool.true
    false: b
  }

// Equal
// Returs true if both inputs are identical
eql(a: Bool, b: Bool): Bool
  case a {
    true: b
    false: neg(b)
  }

// Xor
// Returns true if both inputs are different
xor(a: Bool, b: Bool): Bool
  neg(eql(a,b))

// Nor
// Returns true if both inputs are false
nor(a: Bool, b: Bool): Bool
  neg(or(a,b))

// Nand
// Returns false only if both inputs are true
nand(a: Bool, b: Bool): Bool
  neg(and(a,b))

// Xnor
// Returns true if both inputs are identical
xnor(a: Bool, b: Bool): Bool
  eql(a,b)


ex_00: IO<Unit>
  IO {
    Tests._00.is_true(is_true)
    Tests._00.is_false(is_false)
    Tests._00.neg(neg)
    Tests._00.and(and)
    Tests._00.or(or)
    Tests._00.eql(eql)
    Tests._00.xor(xor)
    Tests._00.nor(nor)
    Tests._00.nand(nand)
    Tests._00.xnor(xnor)
  }
