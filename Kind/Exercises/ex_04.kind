// Advanced exercises involving recursion

type Nat {
  zero
  succ(pred: Nat)
}

// Doubles a number
dbl(a: Nat): Nat // double
  case a {
    zero: Nat.zero
    succ: Nat.succ(Nat.succ(dbl(a.pred)))
  }

// Addition
add(a: Nat, b: Nat): Nat
  case a {
    zero: b
    succ: add(a.pred, Nat.succ(b))
  }

// Multiplication
// mul_aux(a: Nat, b: Nat, acc: Nat): Nat 
//   case a {
//     zero: acc
//     succ: mul_aux(a.pred, b, add(acc, b))
//   }
mul(a: Nat, b: Nat): Nat
  // mul_aux(a, b, Nat.zero)
  case a {
    zero: Nat.zero
    succ: case a.pred {
      zero: b
      succ: add(b, mul(a.pred, b))
    }
  }

// Subtraction
// 4 - 5 = 0
// 5 - 4 = 1
sub(a: Nat, b: Nat): Nat
  case a {
    zero: Nat.zero
    succ: case b {
      zero: a
      succ: sub(a.pred, b.pred)
    }
  }

// Factorial
// 4! = 24
fac(a: Nat): Nat 
  case a {
    zero: Nat.succ(a)
    succ: mul(a, fac(a.pred))
  }

// Equal
eql(a: Nat, b: Nat): Bool // Given 2 numbers, it returns true if the 2 are the same and false if they are different.
  case sub(a,b) {
    succ: Bool.false
    zero: case sub(b,a) {
      zero: Bool.true
      succ: Bool.false
    }
  }

// Do not use the "not" function to create the functions below

// Greater than
// 2 > 1 = True
// 3 > 3 = False
gtn(a: Nat, b: Nat): Bool // if A > B == True else false
  case sub(a, b) {
    zero: false
    succ: true
  }

// Lower than
// 1 < 2 = True
// 3 < 3 = False
ltn(a: Nat, b: Nat): Bool // if A > B == False else true 
  case sub(b, a) {
    zero: false
    succ: true
  }

// Minimum
// min(2, 3) = 2
// min(4, 1) = 1
min(a: Nat, b: Nat): Nat // if A < B then A else B
  case ltn(a,b) {
    true: a
    false: b
  }

// Maximum
// max(2, 3) = 3
// max(4, 1) = 4
max(a: Nat, b: Nat): Nat // if A > B then A else B
  case gtn(a,b) {
    true: a
    false: b
  }


// Divides a number by two
// 2 / 2 = 1
// 5 / 2 = 2
// 1 / 2 = 0
hlf(a: Nat): Nat
  case a {
    zero: Nat.zero
    succ: case a.pred {
      zero: Nat.zero
      succ: Nat.succ(hlf(a.pred.pred))
    }
  }

// Division
// 1 / 2 = 0
// x / 0 = 0
// 5 / 2 = 2
div(a: Nat, b: Nat): Nat // division
  let zero = Nat.zero
  let one = Nat.succ(zero)
  case b {
    zero: zero
    succ: case b.pred {
      zero: a
      succ: case ltn(a, b) {
        true: zero
        false:  add(one, div(sub(a,b), b))
      }
    }
  }
