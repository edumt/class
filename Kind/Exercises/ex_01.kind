// type MaybeBool
// It maybe holds a Boolean inside it

type MaybeBool { 
  none 
  some(value: Bool)
 }
 // Returns true if Maybe is none
is_none(a: MaybeBool): Bool
  case a {
    none: Bool.true
    some: Bool.false
  }
    
// Returns true if Maybe is some
is_some(a: MaybeBool): Bool
  case a {
    none: Bool.false
    some: Bool.true
  }

// Returns true if both inputs are identical
// eql(MaybeBool.none,             MaybeBool.none            ) -> true
// eql(MaybeBool.some(Bool.false), MaybeBool.none            ) -> false
// eql(MaybeBool.some(Bool.true),  MaybeBool.some(Bool.false)) -> false
// eql(MaybeBool.some(Bool.false), MaybeBool.some(Bool.false)) -> true
eql(a: MaybeBool, b: MaybeBool): Bool
  case a {
    none: is_none(b)
    some: case b {
      none: Bool.false
      some: Bool.eql(a.value, b.value)
    }
  }

// Returns the value inside the MaybeBool.
// If there is no value contained, returns v instead
extract(a: MaybeBool, v: Bool): Bool
  case a {
    some: a.value
    none: v
  }

// Create a MaybeBool from a Boolean
// create(Bool.false) -> MaybeBool(Bool.false)
create(a:Bool): MaybeBool
  MaybeBool.some(a)

// Returns the first input that is a MaybeBool.some
// Returns MaybeBool.none if both are MaybeBool.none
or(a: MaybeBool, b: MaybeBool) : MaybeBool 
  case a {
    some: a
    none: b
  }


ex_01: IO<Unit>
  IO {
    Tests._01.is_none(is_none)
    Tests._01.is_some(is_some)
    Tests._01.eql(eql)
    Tests._01.extract(extract)
    Tests._01.create(create)
    Tests._01.or(or)
  }
