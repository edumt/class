//Bits

//File for exercises in Bits

//e = empty
//o = 0
//i = 1
type Bits { 
  e
  o(pred: Bits)
  i(pred: Bits)
}

//a = Bits.i(Bits.i(Bits.e))
//b = Bits.o(Bits.i(Bits.i(Bits.e)))
//c = Bits.o(Bits.o(Bits.i(Bits.i(Bits.e))))
//d = Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))


//Verifies if it is an Empty Bit

//is_empty(a)      -> Bool.false
//is_empty(b)      -> Bool.false
//is_empty(c)      -> Bool.false
//is_empty(d)      -> Bool.false
//is_empty(Bits.e) -> Bool.true
is_empty(b: Bits): Bool
  case b {
    e: true
    o: false
    i: false
  }



//Gets the Tail of a Bits structure

//tail(a) -> Bits.i(Bits.e)
//tail(b) -> Bits.i(Bits.i(Bits.e))
//tail(c) -> Bits.o(Bits.i(Bits.i(Bits.e)))
//tail(d) -> Bits.i(Bits.i(Bits.i(Bits.e)))
tail(b: Bits): Bits
  case b {
    e: Bits.e
    o: b.pred
    i: b.pred
  }



//Negates all Bits

//notb(a) -> Bits.o(Bits.o(Bits.e))
//notb(b) -> Bits.i(Bits.o(Bits.o(Bits.e)))
//notb(c) -> Bits.i(Bits.i(Bits.o(Bits.o(Bits.e))))
//notb(d) -> Bits.o(Bits.o(Bits.o(Bits.o(Bits.e))))
notb(b: Bits): Bits
  case b {
    e: Bits.e
    o: Bits.i(notb(b.pred))
    i: Bits.o(notb(b.pred))
  }



//Increments a Bit

//inc(a) -> Bits.o(Bits.o(Bits.i(Bits.e)))
//inc(b) -> Bits.i(Bits.i(Bits.i(Bits.e)))
//inc(c) -> Bits.i(Bits.o(Bits.i(Bits.i(Bits.e))))
//inc(d) -> Bits.o(Bits.o(Bits.o(Bits.o(Bits.i(Bits.e)))))
inc(b: Bits): Bits
  case b {
    e: Bits.i(Bits.e)
    o: Bits.i(b.pred)
    i: Bits.o(inc(b.pred))
  }



//Decrements a Bit

//dec(a) -> Bits.o(Bits.i(Bits.e))
//dec(b) -> Bits.i(Bits.o(Bits.i(Bits.e)))
//dec(c) -> Bits.i(Bits.i(Bits.o(Bits.i(Bits.e))))
//dec(d) -> Bits.o(Bits.i(Bits.i(Bits.i(Bits.e))))
dec(b: Bits): Bits
  case b {
    e: Bits.e
    o: Bits.i(dec(b.pred))
    i: Bits.o(b.pred)
  }



//Concatenate two Bits structures

//concat(a,b) -> Bits.i(Bits.i(Bits.o(Bits.i(Bits.i(Bits.e)
//concat(b,c) -> Bits.o(Bits.i(Bits.i(Bits.o(Bits.o(Bits.i(Bits.i(Bits.e)))))))
//concat(c,d) -> Bits.o(Bits.o(Bits.i(Bits.i(Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))))))
concat(a: Bits, b: Bits): Bits
  case a {
    e: b
    o: Bits.o(concat(a.pred, b))
    i: Bits.i(concat(a.pred, b))
  }



//Adds two Bits structures

//add(a,b) -> Bits.i(Bits.o(Bits.o(Bits.i(Bits.e))))
//add(b,c) -> Bits.o(Bits.i(Bits.o(Bits.o(Bits.i(Bits.o(Bits.e))))))
//add(c,d) -> Bits.i(Bits.i(Bits.o(Bits.i(Bits.o(Bits.i(Bits.e))))))
add(a: Bits, b: Bits): Bits 
  // to do
  case a b {
    e e: Bits.e
    e o: b
    e i: b
    o e: a
    i e: a
    o o: Bits.o(add(a.pred,b.pred))
    o i: Bits.i(add(a.pred,b.pred))
    i o: Bits.i(add(a.pred,b.pred))
    i i: Bits.o(add(add(a.pred,b.pred), Bits.i(Bits.e)))
  }



//Returns Bits.i if only both bits are Bits.i

//and(a,b) -> Bits.o(Bits.i(Bits.e))
//and(b,c) -> Bits.o(Bits.o(Bits.i(Bits.e)))
//and(c,d) -> Bits.o(Bits.o(Bits.i(Bits.i(Bits.e))))
and(a: Bits, b: Bits): Bits
  case a b {
    e e: Bits.e
    e o: Bits.e
    e i: Bits.e
    o e: Bits.e
    i e: Bits.e
    o o: Bits.o(and(a.pred,b.pred))
    o i: Bits.o(and(a.pred,b.pred))
    i o: Bits.o(and(a.pred,b.pred))
    i i: Bits.i(and(a.pred,b.pred))
  }



//Returns Bits.i if any of bits are Bits.i

//or(a,b) -> Bits.i(Bits.i(Bits.i(Bits.e)))
//or(b,c) -> Bits.o(Bits.i(Bits.i(Bits.i(Bits.e))))
//or(c,d) -> Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))
or(a: Bits, b: Bits): Bits
  case a b {
    e e: Bits.e
    e o: Bits.e
    o e: Bits.e
    e i: b
    i e: a
    o o: Bits.o(or(a.pred,b.pred))
    o i: Bits.i(or(a.pred,b.pred))
    i o: Bits.i(or(a.pred,b.pred))
    i i: Bits.i(or(a.pred,b.pred))
  }



//Verifies if both Bit structures are equal

//eql(a,b) -> Bool.false
//eql(b,c) -> Bool.false
//eql(d,d) -> Bool.true
eql(a: Bits, b: Bits): Bool
  case a b {
    e e: Bool.true
    o o: eql(a.pred,b.pred)
    i i: eql(a.pred,b.pred)
  } default Bool.false



//Reverses a Bits structure

reverse_go(b: Bits, acum: Bits): Bits
  case b {
    e: acum
    o: reverse_go(b.pred, Bits.o(acum))
    i: reverse_go(b.pred, Bits.i(acum))
  }

//reverse(a) -> Bits.i(Bits.i(Bits.e))
//reverse(b) -> Bits.i(Bits.i(Bits.o(Bits.e)))
//reverse(c) -> Bits.i(Bits.i(Bits.o(Bits.o(Bits.e))))
//reverse(d) -> Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))
reverse(b: Bits): Bits
  reverse_go(b, Bits.e)



//Gets the length of the Bits structure

//length(a) -> Nat.succ(Nat.succ(Nat.zero))
//length(b) -> Nat.succ(Nat.succ(Nat.succ(Nat.zero)))
//length(c) -> Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.zero))))
//length(d) -> 4
length(bs: Bits): Nat
  case bs {
    e: Nat.zero
  } default Nat.succ(length(bs.pred))



//Multiplies two Bits structures

// mul_go(a: Bits, b: Bits, acum: Bits): Bits
//   ?mul_go


//mul(a,b) -> Bits.o(Bits.i(Bits.o(Bits.o(Bits.i(Bits.e)))))
//mul(b,c) -> Bits.o(Bits.o(Bits.o(Bits.i(Bits.o(Bits.o(Bits.i(Bits.e)))))))
mul(a: Bits, b: Bits): Bits
  case a {
    e: Bits.e
    i: case a.pred {
      e: b
    } default add(b, mul(dec(a), b))
    o: case a.pred {
      e: Bits.o(Bits.e)
    } default add(b, mul(dec(a), b))
  }
  // mul_go(a, b, Bits.e)



//Drops a n Number of Bits starting from from the least significative bit

//drop(1, a) -> Bits.i(Bits.e)
//drop(1, b) -> Bits.i(Bits.i(Bits.e))
//drop(1, c) -> Bits.o(Bits.i(Bits.i(Bits.e)))
//drop(1, d) -> Bits.i(Bits.i(Bits.i(Bits.e)))
drop(n: Nat, bs: Bits): Bits
  case n {
    zero: bs
    succ: case bs {
      e: Bits.e
    } default drop(n.pred, bs.pred)
  }



//Takes n Bits from the structure, starting from the least significative bit

//take(1, a) -> Bits.i(Bits.e)
//take(2, b) -> Bits.o(Bits.i(Bits.e))
//take(3, c) -> Bits.o(Bits.o(Bits.i(Bits.e)))
//take(4, d) -> Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))
take(n: Nat, bs: Bits): Bits
  case n {
    zero: Bits.e
    succ: case bs {
      e: Bits.e
      o: Bits.o(take(n.pred,bs.pred))
      i: Bits.i(take(n.pred,bs.pred))
    }
  }

ex_07: _
  let a = Bits.i(Bits.i(Bits.e))
  let b = Bits.o(Bits.i(Bits.i(Bits.e)))
  let c = Bits.o(Bits.o(Bits.i(Bits.i(Bits.e))))
  let d = Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))
  let e = Bits.i(Bits.i(Bits.e))
  mul(e,e)

  // to do: check overflow on all operations

  // 11 11
  // 01 11 -> 11
  // 1 11 -> 11 + 11
  // 0 11 -> 11 + 11 + 11
  //  -> 11 + 11 + 11 + 0