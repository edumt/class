Tests._05.swap(swap: <A: Type, B: Type> -> Pair<A, B> -> Pair<B, A>): IO<Unit>
  IO {
    Assert.pair<String, String>({Assert.string.funcs, Assert.string.funcs}, "swap {first, second}", swap<String, String>({"first", "second"}), {"second", "first"})
    Assert.pair<String, Nat>({Assert.string.funcs, Assert.nat.funcs} "swap {2, first}", swap<Nat, String>({2, "first"}), {"first", 2})
    Assert.pair<Bool, Bool>({Assert.bool.funcs, Assert.bool.funcs} "swap {true, false}", swap<Bool, Bool>({true, false}), {false, true})
    IO.print("swap: All terms tested")
  }

Tests._05.first(first: <A: Type, B: Type> -> Pair<A, B> -> A): IO<Unit>
  IO {
    Assert.string("first {first, second}", first<String, String>({"first", "second"}), "first")
    Assert.nat("first {1, second}", first<Nat, String>({1, "second"}), 1)
    IO.print("first: All terms tested")
  }

Tests._05.second(second: <A: Type, B: Type> -> Pair<A, B> -> B): IO<Unit>
  IO {
    Assert.string("second {first, second}", second<String, String>({"first", "second"}), "second")
    Assert.nat("first {first, 2}", second<String, Nat>({"first", 2}), 2)
    IO.print("second: All terms tested")
  }

Tests._05.map(map: <A: Type, B: Type> -> (A -> B) -> Pair<A, A> -> Pair<B, B>): IO<Unit>
  IO {
    Assert.pair<Nat, Nat>({Assert.nat.funcs, Assert.nat.funcs}, "map Nat.succ {1, 2}", map<Nat, Nat>(Nat.succ, {1, 2}), {2, 3})
    Assert.pair<String, String>({Assert.string.funcs, Assert.string.funcs}, "map Nat.show {1, 2}", map<Nat, String>(Nat.show, {1, 2}), {"1", "2"})
    IO.print("map: All terms tested")
  }

