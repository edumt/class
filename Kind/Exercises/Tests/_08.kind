a: List<String>
  ["aa", "bb", "cc"]

a1: List<String>
  ["dd", "ee"]

b: List<Nat>
  [1, 2, 3]

c: List<Nat>
  [4, 5]

Tests._08.head(head: <A: Type> -> List<A> -> Maybe<A>): IO<Unit>
  IO {
    Assert.maybe<String>(Assert.string.funcs, "head [aa, bb, cc]", head<String>(a), Maybe.some<String>("aa")) 
    Assert.maybe<Nat>(Assert.nat.funcs, "head [1, 2, 3]", head<Nat>(b), Maybe.some<Nat>(1)) 
    Assert.maybe<Nat>(Assert.nat.funcs, "head []", head<Nat>([]), Maybe.none<Nat>) 
    IO.print("head: All terms tested")
  }

Tests._08.tail(tail: <A: Type> -> List<A> -> List<A>): IO<Unit>
  IO {
    Assert.list<String>(Assert.string.funcs, "tail [aa, bb, cc]", tail<String>(a), ["bb", "cc"]) 
    Assert.list<Nat>(Assert.nat.funcs, "tail [1, 2, 3]", tail<Nat>(b), [2, 3]) 
    IO.print("tail: All terms tested")
  }

Tests._08.length(length: <A: Type> -> List<A> -> Nat): IO<Unit>
  IO {
    Assert.nat("length [aa, bb, cc]", length<String>(a), 3) 
    Assert.nat("length [1, 2, 3]", length<Nat>(b), 3) 
    Assert.nat("length [4, 5]", length<Nat>(c), 2) 
    IO.print("length: All terms tested")
  }

Tests._08.last(last: <A: Type> -> List<A> -> Maybe<A>): IO<Unit>
  IO {
    Assert.maybe<String>(Assert.string.funcs, "last [aa, bb, cc]", last<String>(a), Maybe.some<String>("cc")) 
    Assert.maybe<Nat>(Assert.nat.funcs, "last [1, 2, 3]", last<Nat>(b), Maybe.some<Nat>(3)) 
    Assert.maybe<Nat>(Assert.nat.funcs, "last []", last<Nat>([]), Maybe.none<Nat>) 
    IO.print("last: All terms tested")
  }

Tests._08.init(init: <A: Type> -> List<A> -> List<A>): IO<Unit>
  IO {
    Assert.list<String>(Assert.string.funcs, "init [aa, bb, cc]", init<String>(a), ["aa", "bb"]) 
    Assert.list<Nat>(Assert.nat.funcs, "init [1, 2, 3]", init<Nat>(b), [1, 2]) 
    IO.print("init: All terms tested")
  }

Tests._08.concat(concat: <A: Type> -> List<A> -> List<A> -> List<A>): IO<Unit>
  IO {
    Assert.list<String>(Assert.string.funcs, "concat [aa, bb, cc] [dd, ee]", concat<String>(a, a1), ["aa", "bb", "cc", "dd", "ee"]) 
    Assert.list<Nat>(Assert.nat.funcs, "concat [1, 2, 3] [4, 5]", concat<Nat>(b, c), [1, 2, 3, 4, 5]) 
    Assert.list<Nat>(Assert.nat.funcs, "concat [4, 5] [1, 2, 3]", concat<Nat>(c, b), [4, 5, 1, 2, 3]) 
    Assert.list<Nat>(Assert.nat.funcs, "concat [] [1, 2, 3]", concat<Nat>([], b), [1, 2, 3]) 
    IO.print("concat: All terms tested")
  }

Tests._08.drop(drop: <A: Type> -> Nat -> List<A> -> List<A>): IO<Unit>
  IO {
    Assert.list<String>(Assert.string.funcs, "drop 1 [aa, bb, cc]", drop<String>(1, a), ["bb", "cc"]) 
    Assert.list<Nat>(Assert.nat.funcs, "drop 1 [4, 5]", drop<Nat>(1, c), [5]) 
    Assert.list<Nat>(Assert.nat.funcs, "drop 2 [1, 2, 3]", drop<Nat>(2, b), [3]) 
    Assert.list<Nat>(Assert.nat.funcs, "drop 0 [1, 2, 3]", drop<Nat>(0, b), b) 
    IO.print("drop: All terms tested")
  }

Tests._08.take(take: <A: Type> -> Nat -> List<A> -> List<A>): IO<Unit>
  IO {
    Assert.list<String>(Assert.string.funcs, "take 2 [aa, bb, cc]", take<String>(2, a), ["aa", "bb"]) 
    Assert.list<Nat>(Assert.nat.funcs, "take 1 [4, 5]", take<Nat>(1, c), [4]) 
    Assert.list<Nat>(Assert.nat.funcs, "take 4 [1, 2, 3]", take<Nat>(4, b), b) 
    Assert.list<Nat>(Assert.nat.funcs, "take 0 [1, 2, 3]", take<Nat>(0, b), []) 
    IO.print("take: All terms tested")
  }

Tests._08.map(map: <A: Type, B: Type> -> (A -> B) -> List<A> -> List<B>): IO<Unit>
  IO {
    Assert.list<Nat>(Assert.nat.funcs, "map Nat.succ [4, 5]", map<Nat, Nat>(Nat.succ, c), [5, 6]) 
    Assert.list<String>(Assert.string.funcs, "map Nat.show [4, 5]", map<Nat, String>(Nat.show, c), ["4", "5"]) 
    IO.print("map: All terms tested")
  }

Tests._08.reverse(reverse: <A: Type> -> List<A> -> List<A>): IO<Unit>
  IO {
    Assert.list<String>(Assert.string.funcs, "reverse [aa, bb, cc]", reverse<String>(a), ["cc", "bb", "aa"]) 
    Assert.list<Nat>(Assert.nat.funcs, "reverse [1, 2, 3]", reverse<Nat>(b), [3, 2, 1]) 
    IO.print("reverse: All terms tested")
  }