p0: Inte
  int(true, 0)

p1: Inte
  int(true, 1)

p2: Inte
   int(true, 2)

p4: Inte
  int(true, 4)   

p5: Inte
  int(true, 5)

p6: Inte
  int(true, 6)

p9: Inte
  int(true, 9)

p10: Inte
   int(true, 10)

p11: Inte
  int(true, 11)

p15: Inte
  int(true, 15)

n1: Inte
  int(false, 1)

n10: Inte
  int(false, 10)

n5: Inte
  int(false, 5)

n2: Inte
  int(false, 2)

n0: Inte
  int(false, 0)

n4: Inte
  int(false, 4)

n6: Inte
  int(false, 6)

n15: Inte
  int(false, 15)

n17: Inte
  int(false, 17)

n34: Inte
  int(false, 34)

n25: Inte
  int(false, 25)

n50: Inte
  int(false, 50)



Tests._06.inc(inc: Inte -> Inte): IO<Unit>
  IO {
    Assert.inte("inc +5", inc(p5), p6)
    Assert.inte("inc +0", inc(p0), p1)
    Assert.inte("inc +1", inc(p1), p2)
    Assert.inte("inc -1", inc(n1), p0)
    Assert.inte("inc -5", inc(n5), n4)
    IO.print("inc: All terms tested")
  }
Tests._06.dec(dec: Inte -> Inte): IO<Unit>
  IO {
    Assert.inte("dec +5", dec(p5), p4)
    Assert.inte("dec +0", dec(p0), n1)
    Assert.inte("dec +1", dec(p1), p0)
    Assert.inte("dec -1", dec(n1), n2)
    Assert.inte("dec -5", dec(n5), n6)
    IO.print("dec: All terms tested")
  }

Tests._06.dbl(dbl: Inte -> Inte): IO<Unit>
  IO {
    Assert.inte("dbl +0",   dbl( p0),  p0)
    Assert.inte("dbl +1",   dbl( p1),  p2)
    Assert.inte("dbl +5",   dbl( p5), p10)
    Assert.inte("dbl -1",   dbl( n1),  n2)
    Assert.inte("dbl -5",   dbl( n5), n10)
    Assert.inte("dbl -17",  dbl(n17), n34)
    IO.print("dbl: All terms tested")
  }

Tests._06.add(add: Inte -> Inte -> Inte): IO<Unit>
  IO {
    Assert.inte("add +0 +0",  add(p0,  p0),  p0)
    Assert.inte("add +0 +1",  add(p0,  p1),  p1)
    Assert.inte("add +5 +1",  add(p5,  p1),  p6)
    Assert.inte("add +10 -1", add(p10, n1),  p9)
    Assert.inte("add +5 -10", add(p5, n10),  n5)
    Assert.inte("add +0 -1",  add(p0,  n1),  n1)
    Assert.inte("add -5 -5",  add(n5,  n5), n10)
    Assert.inte("add -5 +10", add(n5, p10),  p5)
    Assert.inte("add -5 +1",  add(n5,  p1),  n4)
    Assert.inte("add -1 +0",  add(n1,  p0),  n1)
    IO.print("add: All terms tested")
    
  }

Tests._06.mul(mul: Inte -> Inte -> Inte): IO<Unit>
  IO {
    Assert.inte("mul -5 +1",  mul(n5,  p1),  n5)
    Assert.inte("mul -5 -1",  mul(n5,  n1),  p5)
    Assert.inte("mul +5 +1",  mul(p5,  p1),  p5)
    Assert.inte("mul +5 -1",  mul(p5,  n1),  n5)
    Assert.inte("mul +5 -10", mul(p5, n10), n50)
    Assert.inte("mul -5 +5",  mul(n5,  p5), n25)
    Assert.inte("mul -5 +0",  mul(n5,  p0),  p0)
    Assert.inte("mul +5 +0",  mul(p5,  p0),  p0)
    Assert.inte("mul +0 -5",  mul(p0,  n5),  p0)
    Assert.inte("mul -5 +0",  mul(n5,  p0),  p0)
    Assert.inte("mul +0 +0",  mul(p0,  p0),  p0)
    IO.print("mul: All terms tested")
  }

Tests._06.sub(sub: Inte -> Inte -> Inte): IO<Unit>
  IO {
    Assert.inte("sub +0 +0",  sub(p0, p0),   p0)
    Assert.inte("sub +0 +1",  sub(p0, p1),   n1)
    Assert.inte("sub +5 +1",  sub(p5, p1),   p4)
    Assert.inte("sub +10 -1", sub(p10, n1), p11)
    Assert.inte("sub +5 -10", sub(p5, n10), p15)
    Assert.inte("sub +0 -1",  sub(p0, n1),   p1)
    Assert.inte("sub -5 -5",  sub(n5, n5),   p0)
    Assert.inte("sub -5 +10", sub(n5, p10), n15)
    Assert.inte("sub -5 +1",  sub(n5, p1),   n6)
    Assert.inte("sub -5 +0",  sub(n5, p0),   n5)
    IO.print("sub: All terms tested")
  }

Tests._06.eql(eql: Inte -> Inte -> Bool): IO<Unit>
  IO {
    Assert.bool("eql -5 +1",  eql(n5, p1),  false)
    Assert.bool("eql -5 -5",  eql(n5, n5),   true)
    Assert.bool("eql -5 +5",  eql(n5, p5),  false)
    Assert.bool("eql +5 +5",  eql(p5, p5),   true)
    Assert.bool("eql +0 -1",  eql(p0, n1),  false)
    Assert.bool("eql +5 +10", eql(p5, p10), false)
    Assert.bool("eql -5 -10", eql(n5, n10), false)
    IO.print("eql: All terms tested")
  }

Tests._06.gtn(gtn: Inte -> Inte -> Bool): IO<Unit>
  IO {
    Assert.bool("gtn -5 +1", gtn(n5, p1), false)
    Assert.bool("gtn -1 -5", gtn(n1, n5),  true)
    Assert.bool("gtn -1 +0", gtn(n1, p0), false)
    Assert.bool("gtn +0 -1", gtn(p0, n1),  true)
    Assert.bool("gtn +1 -5", gtn(p1, n5),  true)
    Assert.bool("gtn +5 +5", gtn(p5, p5), false)
    Assert.bool("gtn -5 -5", gtn(n5, n5), false)
    IO.print("gtn: All terms tested")
  }

Tests._06.ltn(ltn: Inte -> Inte -> Bool): IO<Unit>
  IO {
    Assert.bool("ltn -5 +1", ltn(n5, p1),  true)
    Assert.bool("ltn -1 -5", ltn(n1, n5), false)
    Assert.bool("ltn -1 +0", ltn(n1, p0),  true)
    Assert.bool("ltn +0 -1", ltn(p0, n1), false)
    Assert.bool("ltn +1 -5", ltn(p1, n5), false)
    Assert.bool("ltn +5 +5", ltn(p5, p5), false)
    Assert.bool("ltn -5 -5", ltn(n5, n5), false)
    IO.print("ltn: All terms tested")
  }

Tests._06.min(min: Inte -> Inte -> Inte): IO<Unit>
  IO {
    Assert.inte("min -5 +1",  min(n5,  p1),  n5)
    Assert.inte("min +5 +1",  min(p5,  p1),  p1)
    Assert.inte("min +5 -10", min(p5, n10), n10)
    Assert.inte("min -5 -10", min(n5, n10), n10)
    Assert.inte("min -5 +0",  min(n5,  p0),  n5)
    Assert.inte("min +0 -5",  min(p0,  n5),  n5)
    Assert.inte("min +0 +0",  min(p0,  p0),  p0)
    IO.print("min: All terms tested")
  }

Tests._06.max(max: Inte -> Inte -> Inte): IO<Unit>
  IO {
    Assert.inte("max -5 +1",  max(n5,  p1), p1)
    Assert.inte("max +5 +1",  max(p5,  p1), p5)
    Assert.inte("max +5 -10", max(p5, n10), p5)
    Assert.inte("max -5 -10", max(n5, n10), n5)
    Assert.inte("max -10 -5", max(n10, n5), n5)
    Assert.inte("max -5 +0",  max(n5,  p0), p0)
    Assert.inte("max +0 -5",  max(p0,  n5), p0)
    Assert.inte("max +0 +0",  max(p0,  p0), p0)
    IO.print("max: All terms tested")
  }

Tests._06.hlf(hlf: Inte -> Inte): IO<Unit>
  IO {
    Assert.inte("hlf -10",  hlf(n10), n5)
    Assert.inte("hlf -5",   hlf( n5), n2)
    Assert.inte("hlf -1",   hlf( n1), p0)
    Assert.inte("hlf +10",  hlf(p10), p5)
    Assert.inte("hlf +5",   hlf( p5), p2)
    Assert.inte("hlf +1",   hlf( p1), p0)
    Assert.inte("hlf +0",   hlf( p0), p0)
    IO.print("hlf: All terms tested")
  }

Tests._06.div(div: Inte -> Inte -> Inte): IO<Unit>
  IO {
    Assert.inte("div -5 +1",  div(n5,  p1),  n5)
    Assert.inte("div -5 -1",  div(n5,  n1),  p5)
    Assert.inte("div +5 +1",  div(p5,  p1),  p5)
    Assert.inte("div +5 -1",  div(p5,  n1),  n5)
    Assert.inte("div +5 -10", div(p5, n10),  p0)
    Assert.inte("div -5 +5",  div(n5,  p5),  n1)
    Assert.inte("div -10 +5", div(n10, p5),  n2)
    Assert.inte("div +10 +5", div(p10, p5),  p2)
    Assert.inte("div +0 +5",  div(p0,  p5),  p0)
    Assert.inte("div +10 +0", div(p10, p0),  p0)
    Assert.inte("div +0 +0",  div(p0,  p0),  p0)
    Assert.inte("div +5 +5",  div(p5,  p5),  p1)
    Assert.inte("div +5 -5",  div(p5,  n5),  n1)
    Assert.inte("div -5 +5",  div(n5,  p5),  n1)
    Assert.inte("div -5 -5",  div(n5,  n5),  p1)
    IO.print("div: All terms tested")
  }