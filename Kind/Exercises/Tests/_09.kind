a: List<String>
  ["aa", "bb", "cc"]

a1: List<String>
  ["dd", "ee"]

b: List<Nat>
  [1, 2, 3]

c: List<Nat>
  [4, 5]

Tests._09.zip(zip: <A: Type, B: Type> -> List<A> -> List<B> -> List<Pair<A, B>>): IO<Unit>
  IO {
    IO.print("TODO: zip")
  }

Tests._09.smallest(smallest: List<Nat> -> Maybe<Nat>): IO<Unit>
  IO {
    Assert.maybe<Nat>(Assert.nat.funcs, "smallest [1, 2, 3]", smallest(b), Maybe.some<Nat>(1))
    Assert.maybe<Nat>(Assert.nat.funcs, "smallest [3, 2, 0, 1]", smallest([3, 2, 0, 1]), Maybe.some<Nat>(0))
    Assert.maybe<Nat>(Assert.nat.funcs, "smallest []", smallest([]), Maybe.none<Nat>)
    IO.print("smallest: All terms tested")
  }

Tests._09.delete_smallest(delete_smallest: List<Nat> -> List<Nat>): IO<Unit>
  IO {
    Assert.list<Nat>(Assert.nat.funcs, "delete_smallest [1, 2, 3]", delete_smallest(b), [2, 3])
    Assert.list<Nat>(Assert.nat.funcs, "delete_smallest [3, 2, 0, 1]", delete_smallest([3, 2, 0, 1]), [3, 2, 1])
    Assert.list<Nat>(Assert.nat.funcs, "delete_smallest []", delete_smallest([]), [])
    IO.print("delete_smallest: All terms tested")
  }

Tests._09.sort_ascending(sort_ascending: List<Nat> -> List<Nat>): IO<Unit>
  IO {
    Assert.list<Nat>(Assert.nat.funcs, "sort_ascending [1, 2, 3]", sort_ascending(b), [1, 2, 3])
    Assert.list<Nat>(Assert.nat.funcs, "sort_ascending [3, 2, 0, 1]", sort_ascending([3, 2, 0, 1]), [0, 1, 2, 3])
    Assert.list<Nat>(Assert.nat.funcs, "sort_ascending []", sort_ascending([]), [])
    IO.print("sort_ascending: All terms tested")
  }

Tests._09.get(get: <A: Type> -> Nat -> List<A> -> Maybe<A>): IO<Unit>
  IO {
    Assert.maybe<Nat>(Assert.nat.funcs, "get 0 [1, 2, 3]", get<Nat>(0, b), Maybe.some<Nat>(1))
    Assert.maybe<Nat>(Assert.nat.funcs, "get 2 [3, 2, 0, 1]", get<Nat>(2, [3, 2, 0, 1]), Maybe.some<Nat>(0))
    Assert.maybe<Nat>(Assert.nat.funcs, "get 10 [1, 2, 3]", get<Nat>(10, b), Maybe.none<Nat>)
    IO.print("get: All terms tested")
  }

Tests._09.filter(filter: <A: Type> -> (A -> Bool) -> List<A> -> List<A>): IO<Unit>
  IO {
    Assert.list<Nat>(Assert.nat.funcs, "filter Nat.odd [1, 2, 3, 4, 5]", filter<Nat>(Nat.odd, [1, 2, 3, 4, 5]), [1, 3, 5])
    Assert.list<Nat>(Assert.nat.funcs, "filter Nat.is_even [1, 2, 3, 4, 5]", filter<Nat>(Nat.is_even, [1, 2, 3, 4, 5]), [2, 4])
    IO.print("filter: All terms tested")
  }