// Play options
type Object {
  rock
  paper
  scissors
}

// Converts a text to an Object. If not possible, returns rock
Object.read(code: String): Object
  switch String.eql(code) {
  "paper": Object.paper
  "scissor": Object.scissors
} default Object.rock

// Converts a number to an Object. If not possible, returns rock
Object.from_nat(n: Nat): Object
  case n {
    zero: Object.rock
    succ: case n.pred {
      zero: Object.paper
      succ: case n.pred.pred {
        zero: Object.scissors
        succ: Object.rock
      }
    }
  }

// Checks if Object a beats Object b
// Draw = false
Object.wins(a: Object, b: Object): Bool
  case a b{
    rock scissors : true
    paper rock : true
    scissors paper : true
  } default Bool.false

// If wins return "You won", else "You lost"
Object.match_result(win: Bool): String
  case win {
    true: "You won"
    false: "You lost"
  }

Object.write(obj: Object): String
  case obj {
    rock: "rock"
    paper: "paper"
    scissors: "scissors"
  }

Test: IO(Unit)
  IO {
    IO.print("Pick one: rock, paper or scissors")
    // Asks for user input and saves it in variable line
    get user_input = IO.get_line

    // Converts the user_input (String) to the Object type
    let user_object = Object.read(user_input)

    // Returns a random number below 3
    // 0, 1 or 2
    get random_num = IO.random(3)

    // Converts random_num (Nat) to the Object type
    let cpu_object = Object.from_nat(random_num)
    IO.print(Object.write(cpu_object))

    // Compares user_object and cpu_object and returns true if user wins
    let user_won = Object.wins(user_object, cpu_object)

    // Final message to be said: "You won" or "You lost"
    let final_message = Object.match_result(user_won)

    IO.print(final_message)

    Test
  }

game_01_rps: _
  Test